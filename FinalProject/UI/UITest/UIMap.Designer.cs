// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton;
            WpfListItem uITitleGoesHereListItem = this.UIMainWindowWindow.UINoteListBoxList.UITitleGoesHereListItem;
            WpfButton uIItemButton11 = this.UINoteViewWindow.UIItemButton1;
            WpfButton uIGreyButton = this.UIColorsWindow.UIGreyButton;
            WpfButton uIRedButton = this.UIColorsWindow.UIRedButton;
            WpfButton uIVioletButton = this.UIColorsWindow.UIVioletButton;
            WpfButton uIBlueButton = this.UIColorsWindow.UIBlueButton;
            WpfButton uIPinkButton = this.UIColorsWindow.UIPinkButton;
            WpfButton uIGreenButton = this.UIColorsWindow.UIGreenButton;
            WpfButton uIYellowButton = this.UIColorsWindow.UIYellowButton;
            WpfButton uIItemButton111 = this.UINoteViewWindow.UIItemButton11;
            WpfListItem uITitleGoesHereListItem1 = this.UIMainWindowWindow.UINoteListBoxList.UITitleGoesHereListItem1;
            WpfButton uIDelButton = this.UINoteViewWindow.UIDelButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(50, 46));

            // Click '+' button
            Mouse.Click(uIItemButton1, new Point(50, 34));

            // Click 'Title Goes Here' list item
            Mouse.Click(uITitleGoesHereListItem, new Point(326, 36));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(48, 50));

            // Click 'Grey' button
            Mouse.Click(uIGreyButton, new Point(46, 56));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(50, 52));

            // Click 'Red' button
            Mouse.Click(uIRedButton, new Point(102, 40));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(52, 56));

            // Click 'Violet' button
            Mouse.Click(uIVioletButton, new Point(64, 32));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(58, 58));

            // Click 'Blue' button
            Mouse.Click(uIBlueButton, new Point(22, 60));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(16, 62));

            // Click 'Pink' button
            Mouse.Click(uIPinkButton, new Point(58, 54));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(56, 28));

            // Click 'Green' button
            Mouse.Click(uIGreenButton, new Point(96, 20));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(42, 44));

            // Click 'Yellow' button
            Mouse.Click(uIYellowButton, new Point(54, 42));

            // Click '...' button
            Mouse.Click(uIItemButton11, new Point(46, 48));

            // Click 'Grey' button
            Mouse.Click(uIGreyButton, new Point(90, 52));

            // Click '+' button
            Mouse.Click(uIItemButton111, new Point(38, 14));

            // Click 'Title Goes Here' list item
            Mouse.Click(uITitleGoesHereListItem1, new Point(596, 42));

            // Click 'Del' button
            Mouse.Click(uIDelButton, new Point(56, 54));

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(58, 38));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfEdit uITitleBoxEdit = this.UINoteViewWindow.UITitleBoxEdit;
            WpfEdit uIFullTextBoxEdit = this.UINoteViewWindow.UIFullTextBoxEdit;
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton1;
            #endregion

            // Verify that the 'Text' property of 'TitleBox' text box equals 'Title Goes Here'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITitleBoxEditText, uITitleBoxEdit.Text);

            // Verify that the 'Text' property of 'FullTextBox' text box equals 'Full Note Text Goes Here'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIFullTextBoxEditText, uIFullTextBoxEdit.Text);

            // Verify that the 'ControlType' property of '...' button equals 'Button'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItemButton1ControlType, uIItemButton1.ControlType.ToString());
        }
        
        /// <summary>
        /// RecordedMethod2
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton1;
            WpfButton uIVioletButton = this.UIColorsWindow.UIVioletButton;
            #endregion

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(18, 46));

            // Click 'Violet' button
            Mouse.Click(uIVioletButton, new Point(86, 40));
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WpfEdit uIFullTextBoxEdit = this.UINoteViewWindow.UIFullTextBoxEdit;
            #endregion

            // Verify that the 'Font' property of 'FullTextBox' text box equals 'Segoe UI'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIFullTextBoxEditFont, uIFullTextBoxEdit.Font);
        }
        
        /// <summary>
        /// opened
        /// </summary>
        public void opened()
        {
            #region Variable Declarations
            WinTreeItem uIDocumentspinnedTreeItem = this.UIFileExplorerWindow.UITreeViewWindow.UIQuickaccessTreeItem.UIDocumentspinnedTreeItem;
            WinEdit uINameEdit = this.UIFileExplorerWindow.UIItemWindow.UIAPClassMainListItem.UINameEdit;
            WinEdit uINameEdit1 = this.UIFileExplorerWindow.UIItemWindow1.UIFinalProjectListItem.UINameEdit;
            WinEdit uINameEdit2 = this.UIFileExplorerWindow.UIItemWindow2.UIUIListItem.UINameEdit;
            WinEdit uINameEdit3 = this.UIFileExplorerWindow.UIItemWindow3.UIUIListItem.UINameEdit;
            WinEdit uINameEdit4 = this.UIFileExplorerWindow.UIItemWindow4.UIBinListItem.UINameEdit;
            WinEdit uINameEdit5 = this.UIFileExplorerWindow.UIItemWindow5.UIDebugListItem.UINameEdit;
            WinEdit uINameEdit6 = this.UIFileExplorerWindow.UIItemWindow6.UIUIListItem.UINameEdit;
            #endregion

            // Click 'Quick access' -> 'Documents (pinned)' tree item
            Mouse.Click(uIDocumentspinnedTreeItem, new Point(70, 24));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(193, 22));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit1, new Point(193, 22));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit2, new Point(193, 22));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit3, new Point(167, 6));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit4, new Point(151, 16));

            // Element not available

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit5, new Point(151, 16));

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit6, new Point(169, 14));
        }
        
        #region Properties
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UINoteViewWindow UINoteViewWindow
        {
            get
            {
                if ((this.mUINoteViewWindow == null))
                {
                    this.mUINoteViewWindow = new UINoteViewWindow();
                }
                return this.mUINoteViewWindow;
            }
        }
        
        public UIColorsWindow UIColorsWindow
        {
            get
            {
                if ((this.mUIColorsWindow == null))
                {
                    this.mUIColorsWindow = new UIColorsWindow();
                }
                return this.mUIColorsWindow;
            }
        }
        
        public UIFileExplorerWindow UIFileExplorerWindow
        {
            get
            {
                if ((this.mUIFileExplorerWindow == null))
                {
                    this.mUIFileExplorerWindow = new UIFileExplorerWindow();
                }
                return this.mUIFileExplorerWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow11();
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UINoteViewWindow mUINoteViewWindow;
        
        private UIColorsWindow mUIColorsWindow;
        
        private UIFileExplorerWindow mUIFileExplorerWindow;
        
        private UIItemWindow11 mUIItemWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'TitleBox' text box equals 'Title Goes Here'
        /// </summary>
        public string UITitleBoxEditText = "Title Goes Here";
        
        /// <summary>
        /// Verify that the 'Text' property of 'FullTextBox' text box equals 'Full Note Text Goes Here'
        /// </summary>
        public string UIFullTextBoxEditText = "Full Note Text Goes Here";
        
        /// <summary>
        /// Verify that the 'ControlType' property of '...' button equals 'Button'
        /// </summary>
        public string UIItemButton1ControlType = "Button";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Font' property of 'FullTextBox' text box equals 'Segoe UI'
        /// </summary>
        public string UIFullTextBoxEditFont = "Segoe UI";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public UINoteListBoxList UINoteListBoxList
        {
            get
            {
                if ((this.mUINoteListBoxList == null))
                {
                    this.mUINoteListBoxList = new UINoteListBoxList(this);
                }
                return this.mUINoteListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private UINoteListBoxList mUINoteListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINoteListBoxList : WpfList
    {
        
        public UINoteListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "NoteListBox";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITitleGoesHereListItem
        {
            get
            {
                if ((this.mUITitleGoesHereListItem == null))
                {
                    this.mUITitleGoesHereListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITitleGoesHereListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Title Goes Here";
                    this.mUITitleGoesHereListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITitleGoesHereListItem;
            }
        }
        
        public WpfListItem UITitleGoesHereListItem1
        {
            get
            {
                if ((this.mUITitleGoesHereListItem1 == null))
                {
                    this.mUITitleGoesHereListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITitleGoesHereListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Title Goes Here";
                    this.mUITitleGoesHereListItem1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITitleGoesHereListItem1;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITitleGoesHereListItem;
        
        private WpfListItem mUITitleGoesHereListItem1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINoteViewWindow : WpfWindow
    {
        
        public UINoteViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "NoteView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NoteView");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIFullTextBoxEdit
        {
            get
            {
                if ((this.mUIFullTextBoxEdit == null))
                {
                    this.mUIFullTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIFullTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "FullTextBox";
                    this.mUIFullTextBoxEdit.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIFullTextBoxEdit;
            }
        }
        
        public WpfEdit UITitleBoxEdit
        {
            get
            {
                if ((this.mUITitleBoxEdit == null))
                {
                    this.mUITitleBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITitleBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TitleBox";
                    this.mUITitleBoxEdit.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUITitleBoxEdit;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ColorBtn";
                    this.mUIItemButton1.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIDelButton
        {
            get
            {
                if ((this.mUIDelButton == null))
                {
                    this.mUIDelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteNoteBtn";
                    this.mUIDelButton.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIDelButton;
            }
        }
        
        public WpfButton UIItemButton11
        {
            get
            {
                if ((this.mUIItemButton11 == null))
                {
                    this.mUIItemButton11 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton11.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton11.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton11;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIFullTextBoxEdit;
        
        private WpfEdit mUITitleBoxEdit;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIDelButton;
        
        private WpfButton mUIItemButton11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIColorsWindow : WpfWindow
    {
        
        public UIColorsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Colors";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Colors");
            #endregion
        }
        
        #region Properties
        public WpfButton UIGreyButton
        {
            get
            {
                if ((this.mUIGreyButton == null))
                {
                    this.mUIGreyButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGreyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Grey";
                    this.mUIGreyButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIGreyButton;
            }
        }
        
        public WpfButton UIRedButton
        {
            get
            {
                if ((this.mUIRedButton == null))
                {
                    this.mUIRedButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRedButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Red";
                    this.mUIRedButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIRedButton;
            }
        }
        
        public WpfButton UIVioletButton
        {
            get
            {
                if ((this.mUIVioletButton == null))
                {
                    this.mUIVioletButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIVioletButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Violet";
                    this.mUIVioletButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIVioletButton;
            }
        }
        
        public WpfButton UIBlueButton
        {
            get
            {
                if ((this.mUIBlueButton == null))
                {
                    this.mUIBlueButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBlueButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Blue";
                    this.mUIBlueButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIBlueButton;
            }
        }
        
        public WpfButton UIPinkButton
        {
            get
            {
                if ((this.mUIPinkButton == null))
                {
                    this.mUIPinkButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPinkButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Pink";
                    this.mUIPinkButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIPinkButton;
            }
        }
        
        public WpfButton UIGreenButton
        {
            get
            {
                if ((this.mUIGreenButton == null))
                {
                    this.mUIGreenButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGreenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Green";
                    this.mUIGreenButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIGreenButton;
            }
        }
        
        public WpfButton UIYellowButton
        {
            get
            {
                if ((this.mUIYellowButton == null))
                {
                    this.mUIYellowButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYellowButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Yellow";
                    this.mUIYellowButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIYellowButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIGreyButton;
        
        private WpfButton mUIRedButton;
        
        private WpfButton mUIVioletButton;
        
        private WpfButton mUIBlueButton;
        
        private WpfButton mUIPinkButton;
        
        private WpfButton mUIGreenButton;
        
        private WpfButton mUIYellowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFileExplorerWindow : WinWindow
    {
        
        public UIFileExplorerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("File Explorer");
            this.WindowTitles.Add("This PC");
            this.WindowTitles.Add("Local Disk (C:)");
            this.WindowTitles.Add("Users");
            this.WindowTitles.Add("pooya");
            this.WindowTitles.Add("Documents");
            this.WindowTitles.Add("APClassMain");
            this.WindowTitles.Add("FinalProject");
            this.WindowTitles.Add("UI");
            this.WindowTitles.Add("bin");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8(this);
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9(this);
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIItemWindow10 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow10(this);
                }
                return this.mUIItemWindow10;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UIItemWindow10 mUIItemWindow10;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        
        public UIQuickaccessTreeItem UIQuickaccessTreeItem
        {
            get
            {
                if ((this.mUIQuickaccessTreeItem == null))
                {
                    this.mUIQuickaccessTreeItem = new UIQuickaccessTreeItem(this);
                }
                return this.mUIQuickaccessTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        
        private UIQuickaccessTreeItem mUIQuickaccessTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIThisPCTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
                    this.mUIThisPCTreeItem.SearchProperties["Value"] = "1";
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIThisPCTreeItem.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuickaccessTreeItem : WinTreeItem
    {
        
        public UIQuickaccessTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Quick access";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDocumentspinnedTreeItem
        {
            get
            {
                if ((this.mUIDocumentspinnedTreeItem == null))
                {
                    this.mUIDocumentspinnedTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDocumentspinnedTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Documents (pinned)";
                    this.mUIDocumentspinnedTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDocumentspinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDocumentspinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDocumentspinnedTreeItem.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIDocumentspinnedTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDocumentspinnedTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("This PC");
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public UILocalDiskCListItem UILocalDiskCListItem
        {
            get
            {
                if ((this.mUILocalDiskCListItem == null))
                {
                    this.mUILocalDiskCListItem = new UILocalDiskCListItem(this);
                }
                return this.mUILocalDiskCListItem;
            }
        }
        
        public UIAPClassMainListItem UIAPClassMainListItem
        {
            get
            {
                if ((this.mUIAPClassMainListItem == null))
                {
                    this.mUIAPClassMainListItem = new UIAPClassMainListItem(this);
                }
                return this.mUIAPClassMainListItem;
            }
        }
        #endregion
        
        #region Fields
        private UILocalDiskCListItem mUILocalDiskCListItem;
        
        private UIAPClassMainListItem mUIAPClassMainListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILocalDiskCListItem : WinListItem
    {
        
        public UILocalDiskCListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Local Disk (C:)";
            this.WindowTitles.Add("This PC");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAvailablespaceEdit
        {
            get
            {
                if ((this.mUIAvailablespaceEdit == null))
                {
                    this.mUIAvailablespaceEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAvailablespaceEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Available space";
                    this.mUIAvailablespaceEdit.WindowTitles.Add("This PC");
                    #endregion
                }
                return this.mUIAvailablespaceEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAvailablespaceEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPClassMainListItem : WinListItem
    {
        
        public UIAPClassMainListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "APClassMain";
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Documents");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Local Disk (C:)");
            this.WindowTitles.Add("APClassMain");
            #endregion
        }
        
        #region Properties
        public UIUsersListItem UIUsersListItem
        {
            get
            {
                if ((this.mUIUsersListItem == null))
                {
                    this.mUIUsersListItem = new UIUsersListItem(this);
                }
                return this.mUIUsersListItem;
            }
        }
        
        public UIFinalProjectListItem UIFinalProjectListItem
        {
            get
            {
                if ((this.mUIFinalProjectListItem == null))
                {
                    this.mUIFinalProjectListItem = new UIFinalProjectListItem(this);
                }
                return this.mUIFinalProjectListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUsersListItem mUIUsersListItem;
        
        private UIFinalProjectListItem mUIFinalProjectListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUsersListItem : WinListItem
    {
        
        public UIUsersListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Users";
            this.WindowTitles.Add("Local Disk (C:)");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Local Disk (C:)");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFinalProjectListItem : WinListItem
    {
        
        public UIFinalProjectListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "FinalProject";
            this.WindowTitles.Add("APClassMain");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("APClassMain");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Users");
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public UIPooyaListItem UIPooyaListItem
        {
            get
            {
                if ((this.mUIPooyaListItem == null))
                {
                    this.mUIPooyaListItem = new UIPooyaListItem(this);
                }
                return this.mUIPooyaListItem;
            }
        }
        
        public UIUIListItem UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPooyaListItem mUIPooyaListItem;
        
        private UIUIListItem mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPooyaListItem : WinListItem
    {
        
        public UIPooyaListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "pooya";
            this.WindowTitles.Add("Users");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Users");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem : WinListItem
    {
        
        public UIUIListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("FinalProject");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("pooya");
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIDocumentsListItem UIDocumentsListItem
        {
            get
            {
                if ((this.mUIDocumentsListItem == null))
                {
                    this.mUIDocumentsListItem = new UIDocumentsListItem(this);
                }
                return this.mUIDocumentsListItem;
            }
        }
        
        public UIUIListItem1 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem1(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDocumentsListItem mUIDocumentsListItem;
        
        private UIUIListItem1 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDocumentsListItem : WinListItem
    {
        
        public UIDocumentsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Documents";
            this.WindowTitles.Add("pooya");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("pooya");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem1 : WinListItem
    {
        
        public UIUIListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Documents");
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIAPClassMainListItem1 UIAPClassMainListItem
        {
            get
            {
                if ((this.mUIAPClassMainListItem == null))
                {
                    this.mUIAPClassMainListItem = new UIAPClassMainListItem1(this);
                }
                return this.mUIAPClassMainListItem;
            }
        }
        
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAPClassMainListItem1 mUIAPClassMainListItem;
        
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPClassMainListItem1 : WinListItem
    {
        
        public UIAPClassMainListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "APClassMain";
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Documents");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("APClassMain");
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIFinalProjectListItem1 UIFinalProjectListItem
        {
            get
            {
                if ((this.mUIFinalProjectListItem == null))
                {
                    this.mUIFinalProjectListItem = new UIFinalProjectListItem1(this);
                }
                return this.mUIFinalProjectListItem;
            }
        }
        
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFinalProjectListItem1 mUIFinalProjectListItem;
        
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFinalProjectListItem1 : WinListItem
    {
        
        public UIFinalProjectListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "FinalProject";
            this.WindowTitles.Add("APClassMain");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("APClassMain");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public UIUIListItem2 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem2(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIListItem2 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem2 : WinListItem
    {
        
        public UIUIListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("FinalProject");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIUIListItem3 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem3(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIListItem3 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem3 : WinListItem
    {
        
        public UIUIListItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIBinListItem1 UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem1(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBinListItem1 mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem1 : WinListItem
    {
        
        public UIBinListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem1 UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem1(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem1 mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem1 : WinListItem
    {
        
        public UIDebugListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIUIListItem4 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem4(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIListItem4 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem4 : WinListItem
    {
        
        public UIUIListItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
    }
}
