// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// PlusButton1
        /// </summary>
        public void PlusButton1()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(53, 45));
        }
        
        /// <summary>
        /// Assertion1 - Use 'Assertion1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void Assertion1()
        {
            #region Variable Declarations
            WpfEdit uIFullTextBoxEdit = this.UINoteViewWindow.UIFullTextBoxEdit;
            WpfEdit uITitleBoxEdit = this.UINoteViewWindow.UITitleBoxEdit;
            WpfButton uIItemButton = this.UINoteViewWindow.UIItemButton;
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton1;
            WpfButton uIDelButton = this.UINoteViewWindow.UIDelButton;
            #endregion

            // Verify that the 'AutomationId' property of 'FullTextBox' text box equals 'FullTextBox'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIFullTextBoxEditAutomationId, uIFullTextBoxEdit.AutomationId);

            // Verify that the 'Font' property of 'FullTextBox' text box equals 'Segoe UI'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIFullTextBoxEditFont, uIFullTextBoxEdit.Font);

            // Verify that the 'Text' property of 'FullTextBox' text box equals 'Full Note Text Goes Here'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIFullTextBoxEditText, uIFullTextBoxEdit.Text);

            // Verify that the 'Height' property of 'FullTextBox' text box equals '708'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIFullTextBoxEditHeight, uIFullTextBoxEdit.Height);

            // Verify that the 'Width' property of 'FullTextBox' text box equals '890'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIFullTextBoxEditWidth, uIFullTextBoxEdit.Width);

            // Verify that the 'Font' property of 'TitleBox' text box equals 'Segoe UI'
            Assert.AreEqual(this.Assertion1ExpectedValues.UITitleBoxEditFont, uITitleBoxEdit.Font);

            // Verify that the 'AutomationId' property of 'TitleBox' text box equals 'TitleBox'
            Assert.AreEqual(this.Assertion1ExpectedValues.UITitleBoxEditAutomationId, uITitleBoxEdit.AutomationId);

            // Verify that the 'Text' property of 'TitleBox' text box equals 'Title Goes Here'
            Assert.AreEqual(this.Assertion1ExpectedValues.UITitleBoxEditText, uITitleBoxEdit.Text);

            // Verify that the 'Height' property of 'TitleBox' text box equals '82'
            Assert.AreEqual(this.Assertion1ExpectedValues.UITitleBoxEditHeight, uITitleBoxEdit.Height);

            // Verify that the 'Width' property of 'TitleBox' text box equals '712'
            Assert.AreEqual(this.Assertion1ExpectedValues.UITitleBoxEditWidth, uITitleBoxEdit.Width);

            // Verify that the 'FriendlyName' property of '+' button equals '+'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButtonFriendlyName, uIItemButton.FriendlyName);

            // Verify that the 'Enabled' property of '+' button equals 'True'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButtonEnabled, uIItemButton.Enabled);

            // Verify that the 'Height' property of '+' button equals '82'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButtonHeight, uIItemButton.Height);

            // Verify that the 'Width' property of '+' button equals '80'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButtonWidth, uIItemButton.Width);

            // Verify that the 'DisplayText' property of '+' button equals '+'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButtonDisplayText, uIItemButton.DisplayText);

            // Verify that the 'DisplayText' property of '...' button equals '...'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButton1DisplayText, uIItemButton1.DisplayText);

            // Verify that the 'Enabled' property of '...' button equals 'True'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButton1Enabled, uIItemButton1.Enabled);

            // Verify that the 'Height' property of '...' button equals '82'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButton1Height, uIItemButton1.Height);

            // Verify that the 'Width' property of '...' button equals '80'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIItemButton1Width, uIItemButton1.Width);

            // Verify that the 'FriendlyName' property of 'Del' button equals 'Del'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIDelButtonFriendlyName, uIDelButton.FriendlyName);

            // Verify that the 'Name' property of 'Del' button equals 'Del'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIDelButtonName, uIDelButton.Name);

            // Verify that the 'Enabled' property of 'Del' button equals 'True'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIDelButtonEnabled, uIDelButton.Enabled);

            // Verify that the 'Height' property of 'Del' button equals '80'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIDelButtonHeight, uIDelButton.Height);

            // Verify that the 'Width' property of 'Del' button equals '80'
            Assert.AreEqual(this.Assertion1ExpectedValues.UIDelButtonWidth, uIDelButton.Width);
        }
        
        /// <summary>
        /// NoteViewTested
        /// </summary>
        public void NoteViewTested()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UINoteViewWindow.UIItemButton;
            WpfListItem uITitleGoesHereListItem = this.UIMainWindowWindow.UINoteListBoxList.UITitleGoesHereListItem;
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton1;
            WpfButton uIGreyButton = this.UIColorsWindow.UIGreyButton;
            WpfButton uIRedButton = this.UIColorsWindow.UIRedButton;
            WpfButton uIVioletButton = this.UIColorsWindow.UIVioletButton;
            WpfButton uIBlueButton = this.UIColorsWindow.UIBlueButton;
            WpfButton uIPinkButton = this.UIColorsWindow.UIPinkButton;
            WpfButton uIGreenButton = this.UIColorsWindow.UIGreenButton;
            WpfButton uIYellowButton = this.UIColorsWindow.UIYellowButton;
            WpfButton uIDelButton = this.UINoteViewWindow.UIDelButton;
            WpfButton uIItemButton2 = this.UIMainWindowWindow.UIItemButton;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(61, 37));

            // Click 'Title Goes Here' list item
            Mouse.Click(uITitleGoesHereListItem, new Point(619, 25));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(25, 37));

            // Click 'Grey' button
            Mouse.Click(uIGreyButton, new Point(49, 29));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(27, 25));

            // Click 'Red' button
            Mouse.Click(uIRedButton, new Point(65, 51));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(41, 33));

            // Click 'Violet' button
            Mouse.Click(uIVioletButton, new Point(73, 61));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(23, 53));

            // Click 'Blue' button
            Mouse.Click(uIBlueButton, new Point(15, 77));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(39, 49));

            // Click 'Pink' button
            Mouse.Click(uIPinkButton, new Point(73, 91));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(25, 39));

            // Click 'Green' button
            Mouse.Click(uIGreenButton, new Point(27, 33));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(45, 33));

            // Click 'Yellow' button
            Mouse.Click(uIYellowButton, new Point(77, 53));

            // Click 'Del' button
            Mouse.Click(uIDelButton, new Point(61, 25));

            // Click '+' button
            Mouse.Click(uIItemButton2, new Point(61, 47));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(47, 49));
        }
        
        /// <summary>
        /// ColorButtonsAssertion - Use 'ColorButtonsAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ColorButtonsAssertion()
        {
            #region Variable Declarations
            WpfButton uIYellowButton = this.UIColorsWindow.UIYellowButton;
            WpfButton uIGreenButton = this.UIColorsWindow.UIGreenButton;
            WpfButton uIPinkButton = this.UIColorsWindow.UIPinkButton;
            WpfButton uIBlueButton = this.UIColorsWindow.UIBlueButton;
            WpfButton uIVioletButton = this.UIColorsWindow.UIVioletButton;
            WpfButton uIRedButton = this.UIColorsWindow.UIRedButton;
            WpfButton uIGreyButton = this.UIColorsWindow.UIGreyButton;
            #endregion

            // Verify that the 'FriendlyName' property of 'Yellow' button equals 'Yellow'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIYellowButtonFriendlyName, uIYellowButton.FriendlyName);

            // Verify that the 'Enabled' property of 'Yellow' button equals 'True'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIYellowButtonEnabled, uIYellowButton.Enabled);

            // Verify that the 'Height' property of 'Yellow' button equals '114'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIYellowButtonHeight, uIYellowButton.Height);

            // Verify that the 'Width' property of 'Yellow' button equals '128'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIYellowButtonWidth, uIYellowButton.Width);

            // Verify that the 'Height' property of 'Green' button equals '114'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIGreenButtonHeight, uIGreenButton.Height);

            // Verify that the 'Width' property of 'Green' button equals '128'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIGreenButtonWidth, uIGreenButton.Width);

            // Verify that the 'Enabled' property of 'Green' button equals 'True'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIGreenButtonEnabled, uIGreenButton.Enabled);

            // Verify that the 'FriendlyName' property of 'Green' button equals 'Green'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIGreenButtonFriendlyName, uIGreenButton.FriendlyName);

            // Verify that the 'AutomationId' property of 'Pink' button equals 'Pink'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIPinkButtonAutomationId, uIPinkButton.AutomationId);

            // Verify that the 'AutomationId' property of 'Blue' button equals 'Blue'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIBlueButtonAutomationId, uIBlueButton.AutomationId);

            // Verify that the 'AutomationId' property of 'Violet' button equals 'Violet'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIVioletButtonAutomationId, uIVioletButton.AutomationId);

            // Verify that the 'AutomationId' property of 'Red' button equals 'Red'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIRedButtonAutomationId, uIRedButton.AutomationId);

            // Verify that the 'AutomationId' property of 'Grey' button equals 'Grey'
            Assert.AreEqual(this.ColorButtonsAssertionExpectedValues.UIGreyButtonAutomationId, uIGreyButton.AutomationId);
        }
        
        /// <summary>
        /// FinishingUp
        /// </summary>
        public void FinishingUp()
        {
            #region Variable Declarations
            WpfButton uIYellowButton = this.UIColorsWindow.UIYellowButton;
            WpfButton uIDelButton = this.UINoteViewWindow.UIDelButton;
            #endregion

            // Click 'Yellow' button
            Mouse.Click(uIYellowButton, new Point(25, 51));

            // Click 'Del' button
            Mouse.Click(uIDelButton, new Point(39, 63));
        }
        
        /// <summary>
        /// ListBoxAssertion - Use 'ListBoxAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ListBoxAssertion()
        {
            #region Variable Declarations
            WpfList uINoteListBoxList = this.UIMainWindowWindow.UINoteListBoxList;
            #endregion

            // Verify that the 'Enabled' property of 'NoteListBox' list box equals 'True'
            Assert.AreEqual(this.ListBoxAssertionExpectedValues.UINoteListBoxListEnabled, uINoteListBoxList.Enabled);

            // Verify that the 'FriendlyName' property of 'NoteListBox' list box equals 'NoteListBox'
            Assert.AreEqual(this.ListBoxAssertionExpectedValues.UINoteListBoxListFriendlyName, uINoteListBoxList.FriendlyName);
        }
        
        #region Properties
        public virtual Assertion1ExpectedValues Assertion1ExpectedValues
        {
            get
            {
                if ((this.mAssertion1ExpectedValues == null))
                {
                    this.mAssertion1ExpectedValues = new Assertion1ExpectedValues();
                }
                return this.mAssertion1ExpectedValues;
            }
        }
        
        public virtual ColorButtonsAssertionExpectedValues ColorButtonsAssertionExpectedValues
        {
            get
            {
                if ((this.mColorButtonsAssertionExpectedValues == null))
                {
                    this.mColorButtonsAssertionExpectedValues = new ColorButtonsAssertionExpectedValues();
                }
                return this.mColorButtonsAssertionExpectedValues;
            }
        }
        
        public virtual ListBoxAssertionExpectedValues ListBoxAssertionExpectedValues
        {
            get
            {
                if ((this.mListBoxAssertionExpectedValues == null))
                {
                    this.mListBoxAssertionExpectedValues = new ListBoxAssertionExpectedValues();
                }
                return this.mListBoxAssertionExpectedValues;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UINoteViewWindow UINoteViewWindow
        {
            get
            {
                if ((this.mUINoteViewWindow == null))
                {
                    this.mUINoteViewWindow = new UINoteViewWindow();
                }
                return this.mUINoteViewWindow;
            }
        }
        
        public UIColorsWindow UIColorsWindow
        {
            get
            {
                if ((this.mUIColorsWindow == null))
                {
                    this.mUIColorsWindow = new UIColorsWindow();
                }
                return this.mUIColorsWindow;
            }
        }
        #endregion
        
        #region Fields
        private Assertion1ExpectedValues mAssertion1ExpectedValues;
        
        private ColorButtonsAssertionExpectedValues mColorButtonsAssertionExpectedValues;
        
        private ListBoxAssertionExpectedValues mListBoxAssertionExpectedValues;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UINoteViewWindow mUINoteViewWindow;
        
        private UIColorsWindow mUIColorsWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Assertion1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class Assertion1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'AutomationId' property of 'FullTextBox' text box equals 'FullTextBox'
        /// </summary>
        public string UIFullTextBoxEditAutomationId = "FullTextBox";
        
        /// <summary>
        /// Verify that the 'Font' property of 'FullTextBox' text box equals 'Segoe UI'
        /// </summary>
        public string UIFullTextBoxEditFont = "Segoe UI";
        
        /// <summary>
        /// Verify that the 'Text' property of 'FullTextBox' text box equals 'Full Note Text Goes Here'
        /// </summary>
        public string UIFullTextBoxEditText = "Full Note Text Goes Here";
        
        /// <summary>
        /// Verify that the 'Height' property of 'FullTextBox' text box equals '708'
        /// </summary>
        public int UIFullTextBoxEditHeight = 708;
        
        /// <summary>
        /// Verify that the 'Width' property of 'FullTextBox' text box equals '890'
        /// </summary>
        public int UIFullTextBoxEditWidth = 890;
        
        /// <summary>
        /// Verify that the 'Font' property of 'TitleBox' text box equals 'Segoe UI'
        /// </summary>
        public string UITitleBoxEditFont = "Segoe UI";
        
        /// <summary>
        /// Verify that the 'AutomationId' property of 'TitleBox' text box equals 'TitleBox'
        /// </summary>
        public string UITitleBoxEditAutomationId = "TitleBox";
        
        /// <summary>
        /// Verify that the 'Text' property of 'TitleBox' text box equals 'Title Goes Here'
        /// </summary>
        public string UITitleBoxEditText = "Title Goes Here";
        
        /// <summary>
        /// Verify that the 'Height' property of 'TitleBox' text box equals '82'
        /// </summary>
        public int UITitleBoxEditHeight = 82;
        
        /// <summary>
        /// Verify that the 'Width' property of 'TitleBox' text box equals '712'
        /// </summary>
        public int UITitleBoxEditWidth = 712;
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of '+' button equals '+'
        /// </summary>
        public string UIItemButtonFriendlyName = "+";
        
        /// <summary>
        /// Verify that the 'Enabled' property of '+' button equals 'True'
        /// </summary>
        public bool UIItemButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Height' property of '+' button equals '82'
        /// </summary>
        public int UIItemButtonHeight = 82;
        
        /// <summary>
        /// Verify that the 'Width' property of '+' button equals '80'
        /// </summary>
        public int UIItemButtonWidth = 80;
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '+' button equals '+'
        /// </summary>
        public string UIItemButtonDisplayText = "+";
        
        /// <summary>
        /// Verify that the 'DisplayText' property of '...' button equals '...'
        /// </summary>
        public string UIItemButton1DisplayText = "...";
        
        /// <summary>
        /// Verify that the 'Enabled' property of '...' button equals 'True'
        /// </summary>
        public bool UIItemButton1Enabled = true;
        
        /// <summary>
        /// Verify that the 'Height' property of '...' button equals '82'
        /// </summary>
        public int UIItemButton1Height = 82;
        
        /// <summary>
        /// Verify that the 'Width' property of '...' button equals '80'
        /// </summary>
        public int UIItemButton1Width = 80;
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Del' button equals 'Del'
        /// </summary>
        public string UIDelButtonFriendlyName = "Del";
        
        /// <summary>
        /// Verify that the 'Name' property of 'Del' button equals 'Del'
        /// </summary>
        public string UIDelButtonName = "Del";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Del' button equals 'True'
        /// </summary>
        public bool UIDelButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Height' property of 'Del' button equals '80'
        /// </summary>
        public int UIDelButtonHeight = 80;
        
        /// <summary>
        /// Verify that the 'Width' property of 'Del' button equals '80'
        /// </summary>
        public int UIDelButtonWidth = 80;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ColorButtonsAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ColorButtonsAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Yellow' button equals 'Yellow'
        /// </summary>
        public string UIYellowButtonFriendlyName = "Yellow";
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Yellow' button equals 'True'
        /// </summary>
        public bool UIYellowButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'Height' property of 'Yellow' button equals '114'
        /// </summary>
        public int UIYellowButtonHeight = 114;
        
        /// <summary>
        /// Verify that the 'Width' property of 'Yellow' button equals '128'
        /// </summary>
        public int UIYellowButtonWidth = 128;
        
        /// <summary>
        /// Verify that the 'Height' property of 'Green' button equals '114'
        /// </summary>
        public int UIGreenButtonHeight = 114;
        
        /// <summary>
        /// Verify that the 'Width' property of 'Green' button equals '128'
        /// </summary>
        public int UIGreenButtonWidth = 128;
        
        /// <summary>
        /// Verify that the 'Enabled' property of 'Green' button equals 'True'
        /// </summary>
        public bool UIGreenButtonEnabled = true;
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'Green' button equals 'Green'
        /// </summary>
        public string UIGreenButtonFriendlyName = "Green";
        
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Pink' button equals 'Pink'
        /// </summary>
        public string UIPinkButtonAutomationId = "Pink";
        
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Blue' button equals 'Blue'
        /// </summary>
        public string UIBlueButtonAutomationId = "Blue";
        
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Violet' button equals 'Violet'
        /// </summary>
        public string UIVioletButtonAutomationId = "Violet";
        
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Red' button equals 'Red'
        /// </summary>
        public string UIRedButtonAutomationId = "Red";
        
        /// <summary>
        /// Verify that the 'AutomationId' property of 'Grey' button equals 'Grey'
        /// </summary>
        public string UIGreyButtonAutomationId = "Grey";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ListBoxAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class ListBoxAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Enabled' property of 'NoteListBox' list box equals 'True'
        /// </summary>
        public bool UINoteListBoxListEnabled = true;
        
        /// <summary>
        /// Verify that the 'FriendlyName' property of 'NoteListBox' list box equals 'NoteListBox'
        /// </summary>
        public string UINoteListBoxListFriendlyName = "NoteListBox";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public UINoteListBoxList UINoteListBoxList
        {
            get
            {
                if ((this.mUINoteListBoxList == null))
                {
                    this.mUINoteListBoxList = new UINoteListBoxList(this);
                }
                return this.mUINoteListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private UINoteListBoxList mUINoteListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINoteListBoxList : WpfList
    {
        
        public UINoteListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "NoteListBox";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITitleGoesHereListItem
        {
            get
            {
                if ((this.mUITitleGoesHereListItem == null))
                {
                    this.mUITitleGoesHereListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITitleGoesHereListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Title Goes Here";
                    this.mUITitleGoesHereListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITitleGoesHereListItem;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITitleGoesHereListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINoteViewWindow : WpfWindow
    {
        
        public UINoteViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "NoteView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NoteView");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIFullTextBoxEdit
        {
            get
            {
                if ((this.mUIFullTextBoxEdit == null))
                {
                    this.mUIFullTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIFullTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "FullTextBox";
                    this.mUIFullTextBoxEdit.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIFullTextBoxEdit;
            }
        }
        
        public WpfEdit UITitleBoxEdit
        {
            get
            {
                if ((this.mUITitleBoxEdit == null))
                {
                    this.mUITitleBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITitleBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TitleBox";
                    this.mUITitleBoxEdit.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUITitleBoxEdit;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ColorBtn";
                    this.mUIItemButton1.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIDelButton
        {
            get
            {
                if ((this.mUIDelButton == null))
                {
                    this.mUIDelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteNoteBtn";
                    this.mUIDelButton.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIDelButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIFullTextBoxEdit;
        
        private WpfEdit mUITitleBoxEdit;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIDelButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIColorsWindow : WpfWindow
    {
        
        public UIColorsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Colors";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Colors");
            #endregion
        }
        
        #region Properties
        public WpfButton UIGreyButton
        {
            get
            {
                if ((this.mUIGreyButton == null))
                {
                    this.mUIGreyButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGreyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Grey";
                    this.mUIGreyButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIGreyButton;
            }
        }
        
        public WpfButton UIRedButton
        {
            get
            {
                if ((this.mUIRedButton == null))
                {
                    this.mUIRedButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRedButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Red";
                    this.mUIRedButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIRedButton;
            }
        }
        
        public WpfButton UIVioletButton
        {
            get
            {
                if ((this.mUIVioletButton == null))
                {
                    this.mUIVioletButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIVioletButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Violet";
                    this.mUIVioletButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIVioletButton;
            }
        }
        
        public WpfButton UIBlueButton
        {
            get
            {
                if ((this.mUIBlueButton == null))
                {
                    this.mUIBlueButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBlueButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Blue";
                    this.mUIBlueButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIBlueButton;
            }
        }
        
        public WpfButton UIPinkButton
        {
            get
            {
                if ((this.mUIPinkButton == null))
                {
                    this.mUIPinkButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPinkButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Pink";
                    this.mUIPinkButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIPinkButton;
            }
        }
        
        public WpfButton UIGreenButton
        {
            get
            {
                if ((this.mUIGreenButton == null))
                {
                    this.mUIGreenButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGreenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Green";
                    this.mUIGreenButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIGreenButton;
            }
        }
        
        public WpfButton UIYellowButton
        {
            get
            {
                if ((this.mUIYellowButton == null))
                {
                    this.mUIYellowButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYellowButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Yellow";
                    this.mUIYellowButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIYellowButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIGreyButton;
        
        private WpfButton mUIRedButton;
        
        private WpfButton mUIVioletButton;
        
        private WpfButton mUIBlueButton;
        
        private WpfButton mUIPinkButton;
        
        private WpfButton mUIGreenButton;
        
        private WpfButton mUIYellowButton;
        #endregion
    }
}
