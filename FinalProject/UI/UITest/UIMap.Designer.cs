// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UITest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddStoreNote - Use 'AddStoreNoteParams' to pass parameters into this method.
        /// </summary>
        public void AddStoreNote()
        {
            #region Variable Declarations
            WpfButton uIItemButton = this.UIMainWindowWindow.UIItemButton;
            WpfEdit uITitleBoxEdit = this.UINoteViewWindow.UITitleBoxEdit;
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton1;
            WpfButton uIYellowButton = this.UIColorsWindow.UIYellowButton;
            WpfButton uIGreenButton = this.UIColorsWindow.UIGreenButton;
            WpfButton uIPinkButton = this.UIColorsWindow.UIPinkButton;
            WpfButton uIBlueButton = this.UIColorsWindow.UIBlueButton;
            WpfButton uIVioletButton = this.UIColorsWindow.UIVioletButton;
            WpfEdit uIFullTextBoxEdit = this.UINoteViewWindow.UIFullTextBoxEdit;
            WpfButton uIRedButton = this.UIColorsWindow.UIRedButton;
            WpfButton uIGreyButton = this.UIColorsWindow.UIGreyButton;
            WpfButton uIItemButton2 = this.UINoteViewWindow.UIItemButton;
            WpfListItem uITestStoreListItem = this.UIMainWindowWindow.UINoteListBoxList.UITestStoreListItem;
            #endregion

            // Click '+' button
            Mouse.Click(uIItemButton, new Point(48, 54));

            // Move 'TitleBox' text box
            Mouse.StartDragging(uITitleBoxEdit, new Point(588, 30));
            Mouse.StopDragging(uITitleBoxEdit, -432, 16);

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(22, 36));

            // Click 'Yellow' button
            Mouse.Click(uIYellowButton, new Point(76, 58));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(72, 56));

            // Click 'Green' button
            Mouse.Click(uIGreenButton, new Point(70, 38));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(32, 64));

            // Click 'Pink' button
            Mouse.Click(uIPinkButton, new Point(84, 28));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(56, 56));

            // Click 'Blue' button
            Mouse.Click(uIBlueButton, new Point(80, 60));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(10, 60));

            // Click 'Violet' button
            Mouse.Click(uIVioletButton, new Point(88, 48));

            // Click 'FullTextBox' text box
            Mouse.Click(uIFullTextBoxEdit, new Point(754, 0));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(42, 26));

            // Click 'Red' button
            Mouse.Click(uIRedButton, new Point(90, 64));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(38, 72));

            // Click 'Grey' button
            Mouse.Click(uIGreyButton, new Point(36, 48));

            // Type 'TestStore' in 'TitleBox' text box
            uITitleBoxEdit.Text = this.AddStoreNoteParams.UITitleBoxEditText;

            // Type 'Test Store' in 'FullTextBox' text box
            uIFullTextBoxEdit.Text = this.AddStoreNoteParams.UIFullTextBoxEditText;

            // Click '+' button
            Mouse.Click(uIItemButton2, new Point(68, 50));

            // Click 'TestStore' list item
            Mouse.Click(uITestStoreListItem, new Point(318, 24));
        }
        
        /// <summary>
        /// Close
        /// </summary>
        public void Close()
        {
            #region Variable Declarations
            WinButton uIUI1runningwindowButton = this.UIRunningapplicationsWindow.UIRunningapplicationsToolBar.UIUI1runningwindowButton;
            #endregion

            // Right-Click 'UI - 1 running window' button
            Mouse.Click(uIUI1runningwindowButton, MouseButtons.Right, ModifierKeys.None, new Point(39, 62));

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.

            // To test Windows Store apps, use the Coded UI Test project template for Windows Store apps under the Windows Store node.
        }
        
        /// <summary>
        /// ColoringAfterStore
        /// </summary>
        public void ColoringAfterStore()
        {
            #region Variable Declarations
            WpfButton uIItemButton1 = this.UINoteViewWindow.UIItemButton1;
            WpfButton uIRedButton = this.UIColorsWindow.UIRedButton;
            WpfButton uIVioletButton = this.UIColorsWindow.UIVioletButton;
            WpfButton uIBlueButton = this.UIColorsWindow.UIBlueButton;
            WpfButton uIPinkButton = this.UIColorsWindow.UIPinkButton;
            WpfButton uIGreenButton = this.UIColorsWindow.UIGreenButton;
            WpfButton uIYellowButton = this.UIColorsWindow.UIYellowButton;
            WpfButton uIGreyButton = this.UIColorsWindow.UIGreyButton;
            WpfButton uIDelButton = this.UINoteViewWindow.UIDelButton;
            #endregion

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(56, 34));

            // Click 'Red' button
            Mouse.Click(uIRedButton, new Point(120, 36));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(50, 46));

            // Click 'Violet' button
            Mouse.Click(uIVioletButton, new Point(68, 12));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(42, 48));

            // Click 'Blue' button
            Mouse.Click(uIBlueButton, new Point(98, 46));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(26, 60));

            // Click 'Pink' button
            Mouse.Click(uIPinkButton, new Point(102, 36));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(40, 70));

            // Click 'Green' button
            Mouse.Click(uIGreenButton, new Point(68, 68));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(42, 50));

            // Click 'Yellow' button
            Mouse.Click(uIYellowButton, new Point(92, 74));

            // Click '...' button
            Mouse.Click(uIItemButton1, new Point(26, 52));

            // Click 'Grey' button
            Mouse.Click(uIGreyButton, new Point(38, 54));

            // Click 'Del' button
            Mouse.Click(uIDelButton, new Point(44, 24));
        }
        
        /// <summary>
        /// Open - Use 'OpenParams' to pass parameters into this method.
        /// </summary>
        public void Open()
        {

            // Launch '%USERPROFILE%\Documents\APClassMain\FinalProject\UI\UI\bin\Debug\UI.exe'
            ApplicationUnderTest uIApplication = ApplicationUnderTest.Launch(this.OpenParams.ExePath, this.OpenParams.AlternateExePath);
        }
        
        #region Properties
        public virtual AddStoreNoteParams AddStoreNoteParams
        {
            get
            {
                if ((this.mAddStoreNoteParams == null))
                {
                    this.mAddStoreNoteParams = new AddStoreNoteParams();
                }
                return this.mAddStoreNoteParams;
            }
        }
        
        public virtual OpenParams OpenParams
        {
            get
            {
                if ((this.mOpenParams == null))
                {
                    this.mOpenParams = new OpenParams();
                }
                return this.mOpenParams;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UINoteViewWindow UINoteViewWindow
        {
            get
            {
                if ((this.mUINoteViewWindow == null))
                {
                    this.mUINoteViewWindow = new UINoteViewWindow();
                }
                return this.mUINoteViewWindow;
            }
        }
        
        public UIColorsWindow UIColorsWindow
        {
            get
            {
                if ((this.mUIColorsWindow == null))
                {
                    this.mUIColorsWindow = new UIColorsWindow();
                }
                return this.mUIColorsWindow;
            }
        }
        
        public UIFileExplorerWindow UIFileExplorerWindow
        {
            get
            {
                if ((this.mUIFileExplorerWindow == null))
                {
                    this.mUIFileExplorerWindow = new UIFileExplorerWindow();
                }
                return this.mUIFileExplorerWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow11();
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIRunningapplicationsWindow UIRunningapplicationsWindow
        {
            get
            {
                if ((this.mUIRunningapplicationsWindow == null))
                {
                    this.mUIRunningapplicationsWindow = new UIRunningapplicationsWindow();
                }
                return this.mUIRunningapplicationsWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddStoreNoteParams mAddStoreNoteParams;
        
        private OpenParams mOpenParams;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UINoteViewWindow mUINoteViewWindow;
        
        private UIColorsWindow mUIColorsWindow;
        
        private UIFileExplorerWindow mUIFileExplorerWindow;
        
        private UIItemWindow11 mUIItemWindow;
        
        private UIRunningapplicationsWindow mUIRunningapplicationsWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddStoreNote'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AddStoreNoteParams
    {
        
        #region Fields
        /// <summary>
        /// Type 'TestStore' in 'TitleBox' text box
        /// </summary>
        public string UITitleBoxEditText = "TestStore";
        
        /// <summary>
        /// Type 'Test Store' in 'FullTextBox' text box
        /// </summary>
        public string UIFullTextBoxEditText = "Test Store";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Open'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class OpenParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\APClassMain\FinalProject\UI\UI\bin\Debug\UI.exe'
        /// </summary>
        public string ExePath = "C:\\Users\\pooya\\Documents\\APClassMain\\FinalProject\\UI\\UI\\bin\\Debug\\UI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Documents\APClassMain\FinalProject\UI\UI\bin\Debug\UI.exe'
        /// </summary>
        public string AlternateExePath = "%USERPROFILE%\\Documents\\APClassMain\\FinalProject\\UI\\UI\\bin\\Debug\\UI.exe";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public UINoteListBoxList UINoteListBoxList
        {
            get
            {
                if ((this.mUINoteListBoxList == null))
                {
                    this.mUINoteListBoxList = new UINoteListBoxList(this);
                }
                return this.mUINoteListBoxList;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIItemButton;
        
        private UINoteListBoxList mUINoteListBoxList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINoteListBoxList : WpfList
    {
        
        public UINoteListBoxList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfList.PropertyNames.AutomationId] = "NoteListBox";
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfListItem UITitleGoesHereListItem
        {
            get
            {
                if ((this.mUITitleGoesHereListItem == null))
                {
                    this.mUITitleGoesHereListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITitleGoesHereListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Title Goes Here";
                    this.mUITitleGoesHereListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITitleGoesHereListItem;
            }
        }
        
        public WpfListItem UITitleGoesHereListItem1
        {
            get
            {
                if ((this.mUITitleGoesHereListItem1 == null))
                {
                    this.mUITitleGoesHereListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITitleGoesHereListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "Title Goes Here";
                    this.mUITitleGoesHereListItem1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITitleGoesHereListItem1;
            }
        }
        
        public WpfListItem UITestassertionListItem
        {
            get
            {
                if ((this.mUITestassertionListItem == null))
                {
                    this.mUITestassertionListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITestassertionListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Test assertion";
                    this.mUITestassertionListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITestassertionListItem;
            }
        }
        
        public WpfListItem UITestNoteListItem
        {
            get
            {
                if ((this.mUITestNoteListItem == null))
                {
                    this.mUITestNoteListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITestNoteListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "Test Note";
                    this.mUITestNoteListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITestNoteListItem;
            }
        }
        
        public WpfListItem UIDataBaseTestListItem
        {
            get
            {
                if ((this.mUIDataBaseTestListItem == null))
                {
                    this.mUIDataBaseTestListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDataBaseTestListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "DataBase Test";
                    this.mUIDataBaseTestListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDataBaseTestListItem;
            }
        }
        
        public WpfListItem UITestStoreListItem
        {
            get
            {
                if ((this.mUITestStoreListItem == null))
                {
                    this.mUITestStoreListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUITestStoreListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "TestStore";
                    this.mUITestStoreListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUITestStoreListItem;
            }
        }
        
        public WpfListItem UIDbTestListItem
        {
            get
            {
                if ((this.mUIDbTestListItem == null))
                {
                    this.mUIDbTestListItem = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDbTestListItem.SearchProperties[WpfListItem.PropertyNames.Name] = "DbTest";
                    this.mUIDbTestListItem.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDbTestListItem;
            }
        }
        
        public WpfListItem UIDbTestListItem1
        {
            get
            {
                if ((this.mUIDbTestListItem1 == null))
                {
                    this.mUIDbTestListItem1 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDbTestListItem1.SearchProperties[WpfListItem.PropertyNames.Name] = "DbTest";
                    this.mUIDbTestListItem1.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDbTestListItem1;
            }
        }
        
        public WpfListItem UIDBtestListItem2
        {
            get
            {
                if ((this.mUIDBtestListItem2 == null))
                {
                    this.mUIDBtestListItem2 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDBtestListItem2.SearchProperties[WpfListItem.PropertyNames.Name] = "DBtest";
                    this.mUIDBtestListItem2.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDBtestListItem2;
            }
        }
        
        public WpfListItem UIDBtestListItem3
        {
            get
            {
                if ((this.mUIDBtestListItem3 == null))
                {
                    this.mUIDBtestListItem3 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDBtestListItem3.SearchProperties[WpfListItem.PropertyNames.Name] = "DBtest";
                    this.mUIDBtestListItem3.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDBtestListItem3;
            }
        }
        
        public WpfListItem UIDBtestListItem4
        {
            get
            {
                if ((this.mUIDBtestListItem4 == null))
                {
                    this.mUIDBtestListItem4 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDBtestListItem4.SearchProperties[WpfListItem.PropertyNames.Name] = "DBtest";
                    this.mUIDBtestListItem4.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDBtestListItem4;
            }
        }
        
        public WpfListItem UIDBtestListItem5
        {
            get
            {
                if ((this.mUIDBtestListItem5 == null))
                {
                    this.mUIDBtestListItem5 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDBtestListItem5.SearchProperties[WpfListItem.PropertyNames.Name] = "DBtest";
                    this.mUIDBtestListItem5.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDBtestListItem5;
            }
        }
        
        public WpfListItem UIDBtestListItem6
        {
            get
            {
                if ((this.mUIDBtestListItem6 == null))
                {
                    this.mUIDBtestListItem6 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDBtestListItem6.SearchProperties[WpfListItem.PropertyNames.Name] = "DBtest";
                    this.mUIDBtestListItem6.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDBtestListItem6;
            }
        }
        
        public WpfListItem UIDBtestListItem7
        {
            get
            {
                if ((this.mUIDBtestListItem7 == null))
                {
                    this.mUIDBtestListItem7 = new WpfListItem(this);
                    #region Search Criteria
                    this.mUIDBtestListItem7.SearchProperties[WpfListItem.PropertyNames.Name] = "DBtest";
                    this.mUIDBtestListItem7.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIDBtestListItem7;
            }
        }
        #endregion
        
        #region Fields
        private WpfListItem mUITitleGoesHereListItem;
        
        private WpfListItem mUITitleGoesHereListItem1;
        
        private WpfListItem mUITestassertionListItem;
        
        private WpfListItem mUITestNoteListItem;
        
        private WpfListItem mUIDataBaseTestListItem;
        
        private WpfListItem mUITestStoreListItem;
        
        private WpfListItem mUIDbTestListItem;
        
        private WpfListItem mUIDbTestListItem1;
        
        private WpfListItem mUIDBtestListItem2;
        
        private WpfListItem mUIDBtestListItem3;
        
        private WpfListItem mUIDBtestListItem4;
        
        private WpfListItem mUIDBtestListItem5;
        
        private WpfListItem mUIDBtestListItem6;
        
        private WpfListItem mUIDBtestListItem7;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UINoteViewWindow : WpfWindow
    {
        
        public UINoteViewWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "NoteView";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("NoteView");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIFullTextBoxEdit
        {
            get
            {
                if ((this.mUIFullTextBoxEdit == null))
                {
                    this.mUIFullTextBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUIFullTextBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "FullTextBox";
                    this.mUIFullTextBoxEdit.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIFullTextBoxEdit;
            }
        }
        
        public WpfEdit UITitleBoxEdit
        {
            get
            {
                if ((this.mUITitleBoxEdit == null))
                {
                    this.mUITitleBoxEdit = new WpfEdit(this);
                    #region Search Criteria
                    this.mUITitleBoxEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "TitleBox";
                    this.mUITitleBoxEdit.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUITitleBoxEdit;
            }
        }
        
        public WpfButton UIItemButton
        {
            get
            {
                if ((this.mUIItemButton == null))
                {
                    this.mUIItemButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton;
            }
        }
        
        public WpfButton UIItemButton1
        {
            get
            {
                if ((this.mUIItemButton1 == null))
                {
                    this.mUIItemButton1 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton1.SearchProperties[WpfButton.PropertyNames.AutomationId] = "ColorBtn";
                    this.mUIItemButton1.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton1;
            }
        }
        
        public WpfButton UIDelButton
        {
            get
            {
                if ((this.mUIDelButton == null))
                {
                    this.mUIDelButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIDelButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "DeleteNoteBtn";
                    this.mUIDelButton.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIDelButton;
            }
        }
        
        public WpfButton UIItemButton11
        {
            get
            {
                if ((this.mUIItemButton11 == null))
                {
                    this.mUIItemButton11 = new WpfButton(this);
                    #region Search Criteria
                    this.mUIItemButton11.SearchProperties[WpfButton.PropertyNames.AutomationId] = "AddNoteBtn";
                    this.mUIItemButton11.WindowTitles.Add("NoteView");
                    #endregion
                }
                return this.mUIItemButton11;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIFullTextBoxEdit;
        
        private WpfEdit mUITitleBoxEdit;
        
        private WpfButton mUIItemButton;
        
        private WpfButton mUIItemButton1;
        
        private WpfButton mUIDelButton;
        
        private WpfButton mUIItemButton11;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIColorsWindow : WpfWindow
    {
        
        public UIColorsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Colors";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Colors");
            #endregion
        }
        
        #region Properties
        public WpfButton UIGreyButton
        {
            get
            {
                if ((this.mUIGreyButton == null))
                {
                    this.mUIGreyButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGreyButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Grey";
                    this.mUIGreyButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIGreyButton;
            }
        }
        
        public WpfButton UIRedButton
        {
            get
            {
                if ((this.mUIRedButton == null))
                {
                    this.mUIRedButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIRedButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Red";
                    this.mUIRedButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIRedButton;
            }
        }
        
        public WpfButton UIVioletButton
        {
            get
            {
                if ((this.mUIVioletButton == null))
                {
                    this.mUIVioletButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIVioletButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Violet";
                    this.mUIVioletButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIVioletButton;
            }
        }
        
        public WpfButton UIBlueButton
        {
            get
            {
                if ((this.mUIBlueButton == null))
                {
                    this.mUIBlueButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIBlueButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Blue";
                    this.mUIBlueButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIBlueButton;
            }
        }
        
        public WpfButton UIPinkButton
        {
            get
            {
                if ((this.mUIPinkButton == null))
                {
                    this.mUIPinkButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIPinkButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Pink";
                    this.mUIPinkButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIPinkButton;
            }
        }
        
        public WpfButton UIGreenButton
        {
            get
            {
                if ((this.mUIGreenButton == null))
                {
                    this.mUIGreenButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIGreenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Green";
                    this.mUIGreenButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIGreenButton;
            }
        }
        
        public WpfButton UIYellowButton
        {
            get
            {
                if ((this.mUIYellowButton == null))
                {
                    this.mUIYellowButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIYellowButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Yellow";
                    this.mUIYellowButton.WindowTitles.Add("Colors");
                    #endregion
                }
                return this.mUIYellowButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIGreyButton;
        
        private WpfButton mUIRedButton;
        
        private WpfButton mUIVioletButton;
        
        private WpfButton mUIBlueButton;
        
        private WpfButton mUIPinkButton;
        
        private WpfButton mUIGreenButton;
        
        private WpfButton mUIYellowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFileExplorerWindow : WinWindow
    {
        
        public UIFileExplorerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "File Explorer";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("File Explorer");
            this.WindowTitles.Add("This PC");
            this.WindowTitles.Add("Local Disk (C:)");
            this.WindowTitles.Add("Users");
            this.WindowTitles.Add("pooya");
            this.WindowTitles.Add("Documents");
            this.WindowTitles.Add("APClassMain");
            this.WindowTitles.Add("FinalProject");
            this.WindowTitles.Add("UI");
            this.WindowTitles.Add("bin");
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UITreeViewWindow UITreeViewWindow
        {
            get
            {
                if ((this.mUITreeViewWindow == null))
                {
                    this.mUITreeViewWindow = new UITreeViewWindow(this);
                }
                return this.mUITreeViewWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow1 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow1(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UIItemWindow2 UIItemWindow2
        {
            get
            {
                if ((this.mUIItemWindow2 == null))
                {
                    this.mUIItemWindow2 = new UIItemWindow2(this);
                }
                return this.mUIItemWindow2;
            }
        }
        
        public UIItemWindow3 UIItemWindow3
        {
            get
            {
                if ((this.mUIItemWindow3 == null))
                {
                    this.mUIItemWindow3 = new UIItemWindow3(this);
                }
                return this.mUIItemWindow3;
            }
        }
        
        public UIItemWindow4 UIItemWindow4
        {
            get
            {
                if ((this.mUIItemWindow4 == null))
                {
                    this.mUIItemWindow4 = new UIItemWindow4(this);
                }
                return this.mUIItemWindow4;
            }
        }
        
        public UIItemWindow5 UIItemWindow5
        {
            get
            {
                if ((this.mUIItemWindow5 == null))
                {
                    this.mUIItemWindow5 = new UIItemWindow5(this);
                }
                return this.mUIItemWindow5;
            }
        }
        
        public UIItemWindow6 UIItemWindow6
        {
            get
            {
                if ((this.mUIItemWindow6 == null))
                {
                    this.mUIItemWindow6 = new UIItemWindow6(this);
                }
                return this.mUIItemWindow6;
            }
        }
        
        public UIItemWindow7 UIItemWindow7
        {
            get
            {
                if ((this.mUIItemWindow7 == null))
                {
                    this.mUIItemWindow7 = new UIItemWindow7(this);
                }
                return this.mUIItemWindow7;
            }
        }
        
        public UIItemWindow8 UIItemWindow8
        {
            get
            {
                if ((this.mUIItemWindow8 == null))
                {
                    this.mUIItemWindow8 = new UIItemWindow8(this);
                }
                return this.mUIItemWindow8;
            }
        }
        
        public UIItemWindow9 UIItemWindow9
        {
            get
            {
                if ((this.mUIItemWindow9 == null))
                {
                    this.mUIItemWindow9 = new UIItemWindow9(this);
                }
                return this.mUIItemWindow9;
            }
        }
        
        public UIItemWindow10 UIItemWindow10
        {
            get
            {
                if ((this.mUIItemWindow10 == null))
                {
                    this.mUIItemWindow10 = new UIItemWindow10(this);
                }
                return this.mUIItemWindow10;
            }
        }
        #endregion
        
        #region Fields
        private UITreeViewWindow mUITreeViewWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UIItemWindow1 mUIItemWindow1;
        
        private UIItemWindow2 mUIItemWindow2;
        
        private UIItemWindow3 mUIItemWindow3;
        
        private UIItemWindow4 mUIItemWindow4;
        
        private UIItemWindow5 mUIItemWindow5;
        
        private UIItemWindow6 mUIItemWindow6;
        
        private UIItemWindow7 mUIItemWindow7;
        
        private UIItemWindow8 mUIItemWindow8;
        
        private UIItemWindow9 mUIItemWindow9;
        
        private UIItemWindow10 mUIItemWindow10;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITreeViewWindow : WinWindow
    {
        
        public UITreeViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "100";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public UIDesktopTreeItem UIDesktopTreeItem
        {
            get
            {
                if ((this.mUIDesktopTreeItem == null))
                {
                    this.mUIDesktopTreeItem = new UIDesktopTreeItem(this);
                }
                return this.mUIDesktopTreeItem;
            }
        }
        
        public UIQuickaccessTreeItem UIQuickaccessTreeItem
        {
            get
            {
                if ((this.mUIQuickaccessTreeItem == null))
                {
                    this.mUIQuickaccessTreeItem = new UIQuickaccessTreeItem(this);
                }
                return this.mUIQuickaccessTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopTreeItem mUIDesktopTreeItem;
        
        private UIQuickaccessTreeItem mUIQuickaccessTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDesktopTreeItem : WinTreeItem
    {
        
        public UIDesktopTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Desktop";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIThisPCTreeItem
        {
            get
            {
                if ((this.mUIThisPCTreeItem == null))
                {
                    this.mUIThisPCTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIThisPCTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "This PC";
                    this.mUIThisPCTreeItem.SearchProperties["Value"] = "1";
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIThisPCTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIThisPCTreeItem.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIThisPCTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIThisPCTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIQuickaccessTreeItem : WinTreeItem
    {
        
        public UIQuickaccessTreeItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinTreeItem.PropertyNames.Name] = "Quick access";
            this.SearchProperties["Value"] = "0";
            this.WindowTitles.Add("File Explorer");
            #endregion
        }
        
        #region Properties
        public WinTreeItem UIDocumentspinnedTreeItem
        {
            get
            {
                if ((this.mUIDocumentspinnedTreeItem == null))
                {
                    this.mUIDocumentspinnedTreeItem = new WinTreeItem(this);
                    #region Search Criteria
                    this.mUIDocumentspinnedTreeItem.SearchProperties[WinTreeItem.PropertyNames.Name] = "Documents (pinned)";
                    this.mUIDocumentspinnedTreeItem.SearchProperties["Value"] = "1";
                    this.mUIDocumentspinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUIDocumentspinnedTreeItem.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIDocumentspinnedTreeItem.WindowTitles.Add("File Explorer");
                    #endregion
                }
                return this.mUIDocumentspinnedTreeItem;
            }
        }
        #endregion
        
        #region Fields
        private WinTreeItem mUIDocumentspinnedTreeItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("This PC");
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public UILocalDiskCListItem UILocalDiskCListItem
        {
            get
            {
                if ((this.mUILocalDiskCListItem == null))
                {
                    this.mUILocalDiskCListItem = new UILocalDiskCListItem(this);
                }
                return this.mUILocalDiskCListItem;
            }
        }
        
        public UIAPClassMainListItem UIAPClassMainListItem
        {
            get
            {
                if ((this.mUIAPClassMainListItem == null))
                {
                    this.mUIAPClassMainListItem = new UIAPClassMainListItem(this);
                }
                return this.mUIAPClassMainListItem;
            }
        }
        #endregion
        
        #region Fields
        private UILocalDiskCListItem mUILocalDiskCListItem;
        
        private UIAPClassMainListItem mUIAPClassMainListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UILocalDiskCListItem : WinListItem
    {
        
        public UILocalDiskCListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Local Disk (C:)";
            this.WindowTitles.Add("This PC");
            #endregion
        }
        
        #region Properties
        public WinEdit UIAvailablespaceEdit
        {
            get
            {
                if ((this.mUIAvailablespaceEdit == null))
                {
                    this.mUIAvailablespaceEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIAvailablespaceEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Available space";
                    this.mUIAvailablespaceEdit.WindowTitles.Add("This PC");
                    #endregion
                }
                return this.mUIAvailablespaceEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIAvailablespaceEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPClassMainListItem : WinListItem
    {
        
        public UIAPClassMainListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "APClassMain";
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Documents");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Local Disk (C:)");
            this.WindowTitles.Add("APClassMain");
            #endregion
        }
        
        #region Properties
        public UIUsersListItem UIUsersListItem
        {
            get
            {
                if ((this.mUIUsersListItem == null))
                {
                    this.mUIUsersListItem = new UIUsersListItem(this);
                }
                return this.mUIUsersListItem;
            }
        }
        
        public UIFinalProjectListItem UIFinalProjectListItem
        {
            get
            {
                if ((this.mUIFinalProjectListItem == null))
                {
                    this.mUIFinalProjectListItem = new UIFinalProjectListItem(this);
                }
                return this.mUIFinalProjectListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUsersListItem mUIUsersListItem;
        
        private UIFinalProjectListItem mUIFinalProjectListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUsersListItem : WinListItem
    {
        
        public UIUsersListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Users";
            this.WindowTitles.Add("Local Disk (C:)");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Local Disk (C:)");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFinalProjectListItem : WinListItem
    {
        
        public UIFinalProjectListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "FinalProject";
            this.WindowTitles.Add("APClassMain");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("APClassMain");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow2 : WinWindow
    {
        
        public UIItemWindow2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Users");
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public UIPooyaListItem UIPooyaListItem
        {
            get
            {
                if ((this.mUIPooyaListItem == null))
                {
                    this.mUIPooyaListItem = new UIPooyaListItem(this);
                }
                return this.mUIPooyaListItem;
            }
        }
        
        public UIUIListItem UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIPooyaListItem mUIPooyaListItem;
        
        private UIUIListItem mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIPooyaListItem : WinListItem
    {
        
        public UIPooyaListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "pooya";
            this.WindowTitles.Add("Users");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Users");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem : WinListItem
    {
        
        public UIUIListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("FinalProject");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow3 : WinWindow
    {
        
        public UIItemWindow3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("pooya");
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIDocumentsListItem UIDocumentsListItem
        {
            get
            {
                if ((this.mUIDocumentsListItem == null))
                {
                    this.mUIDocumentsListItem = new UIDocumentsListItem(this);
                }
                return this.mUIDocumentsListItem;
            }
        }
        
        public UIUIListItem1 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem1(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDocumentsListItem mUIDocumentsListItem;
        
        private UIUIListItem1 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDocumentsListItem : WinListItem
    {
        
        public UIDocumentsListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Documents";
            this.WindowTitles.Add("pooya");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("pooya");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem1 : WinListItem
    {
        
        public UIUIListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow4 : WinWindow
    {
        
        public UIItemWindow4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Documents");
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIAPClassMainListItem1 UIAPClassMainListItem
        {
            get
            {
                if ((this.mUIAPClassMainListItem == null))
                {
                    this.mUIAPClassMainListItem = new UIAPClassMainListItem1(this);
                }
                return this.mUIAPClassMainListItem;
            }
        }
        
        public UIBinListItem UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIAPClassMainListItem1 mUIAPClassMainListItem;
        
        private UIBinListItem mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIAPClassMainListItem1 : WinListItem
    {
        
        public UIAPClassMainListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "APClassMain";
            this.WindowTitles.Add("Documents");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Documents");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem : WinListItem
    {
        
        public UIBinListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow5 : WinWindow
    {
        
        public UIItemWindow5(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("APClassMain");
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIFinalProjectListItem1 UIFinalProjectListItem
        {
            get
            {
                if ((this.mUIFinalProjectListItem == null))
                {
                    this.mUIFinalProjectListItem = new UIFinalProjectListItem1(this);
                }
                return this.mUIFinalProjectListItem;
            }
        }
        
        public UIDebugListItem UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFinalProjectListItem1 mUIFinalProjectListItem;
        
        private UIDebugListItem mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFinalProjectListItem1 : WinListItem
    {
        
        public UIFinalProjectListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "FinalProject";
            this.WindowTitles.Add("APClassMain");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("APClassMain");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem : WinListItem
    {
        
        public UIDebugListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow6 : WinWindow
    {
        
        public UIItemWindow6(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public UIUIListItem2 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem2(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIListItem2 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem2 : WinListItem
    {
        
        public UIUIListItem2(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("FinalProject");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("FinalProject");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow7 : WinWindow
    {
        
        public UIItemWindow7(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIUIListItem3 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem3(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIListItem3 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem3 : WinListItem
    {
        
        public UIUIListItem3(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow8 : WinWindow
    {
        
        public UIItemWindow8(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public UIBinListItem1 UIBinListItem
        {
            get
            {
                if ((this.mUIBinListItem == null))
                {
                    this.mUIBinListItem = new UIBinListItem1(this);
                }
                return this.mUIBinListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIBinListItem1 mUIBinListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIBinListItem1 : WinListItem
    {
        
        public UIBinListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "bin";
            this.WindowTitles.Add("UI");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("UI");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow9 : WinWindow
    {
        
        public UIItemWindow9(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public UIDebugListItem1 UIDebugListItem
        {
            get
            {
                if ((this.mUIDebugListItem == null))
                {
                    this.mUIDebugListItem = new UIDebugListItem1(this);
                }
                return this.mUIDebugListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIDebugListItem1 mUIDebugListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugListItem1 : WinListItem
    {
        
        public UIDebugListItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "Debug";
            this.WindowTitles.Add("bin");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("bin");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow10 : WinWindow
    {
        
        public UIItemWindow10(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIUIListItem4 UIUIListItem
        {
            get
            {
                if ((this.mUIUIListItem == null))
                {
                    this.mUIUIListItem = new UIUIListItem4(this);
                }
                return this.mUIUIListItem;
            }
        }
        #endregion
        
        #region Fields
        private UIUIListItem4 mUIUIListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIUIListItem4 : WinListItem
    {
        
        public UIUIListItem4(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "UI";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Desktop 1";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32769";
            #endregion
        }
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRunningapplicationsWindow : WinWindow
    {
        
        public UIRunningapplicationsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Running applications";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "MSTaskSwWClass";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public UIRunningapplicationsToolBar UIRunningapplicationsToolBar
        {
            get
            {
                if ((this.mUIRunningapplicationsToolBar == null))
                {
                    this.mUIRunningapplicationsToolBar = new UIRunningapplicationsToolBar(this);
                }
                return this.mUIRunningapplicationsToolBar;
            }
        }
        #endregion
        
        #region Fields
        private UIRunningapplicationsToolBar mUIRunningapplicationsToolBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIRunningapplicationsToolBar : WinToolBar
    {
        
        public UIRunningapplicationsToolBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinToolBar.PropertyNames.Name] = "Running applications";
            this.WindowTitles.Add("Running applications");
            #endregion
        }
        
        #region Properties
        public WinButton UIUI1runningwindowButton
        {
            get
            {
                if ((this.mUIUI1runningwindowButton == null))
                {
                    this.mUIUI1runningwindowButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIUI1runningwindowButton.SearchProperties[WinButton.PropertyNames.Name] = "UI - 1 running window";
                    this.mUIUI1runningwindowButton.WindowTitles.Add("Running applications");
                    #endregion
                }
                return this.mUIUI1runningwindowButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIUI1runningwindowButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIFolderViewWindow UIFolderViewWindow
        {
            get
            {
                if ((this.mUIFolderViewWindow == null))
                {
                    this.mUIFolderViewWindow = new UIFolderViewWindow(this);
                }
                return this.mUIFolderViewWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIFolderViewWindow mUIFolderViewWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFolderViewWindow : WinWindow
    {
        
        public UIFolderViewWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new WinList(this);
                    #region Search Criteria
                    this.mUIDesktopList.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
                    this.mUIDesktopList.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private WinList mUIDesktopList;
        #endregion
    }
}
